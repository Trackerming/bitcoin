cmake_minimum_required(VERSION 3.3)
project(bitcoin)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

include_directories(build_msvc)
include_directories(db4/db-4.8.30.NC/build_brew)
include_directories(db4/db-4.8.30.NC/build_s60)
include_directories(db4/db-4.8.30.NC/build_unix)
include_directories(db4/db-4.8.30.NC/build_vxworks)
include_directories(db4/db-4.8.30.NC/build_vxworks/test_micro)
include_directories(db4/db-4.8.30.NC/build_wince)
include_directories(db4/db-4.8.30.NC/build_windows)
include_directories(db4/db-4.8.30.NC/db_sql)
include_directories(db4/db-4.8.30.NC/db_sql/sqlite)
include_directories(db4/db-4.8.30.NC/dbinc)
include_directories(db4/db-4.8.30.NC/dbinc_auto)
include_directories(db4/db-4.8.30.NC/dist)
include_directories(db4/db-4.8.30.NC/dist/brew)
include_directories(db4/db-4.8.30.NC/examples_c/csv)
include_directories(db4/db-4.8.30.NC/examples_c/ex_apprec)
include_directories(db4/db-4.8.30.NC/examples_c/ex_rep/base)
include_directories(db4/db-4.8.30.NC/examples_c/ex_rep/common)
include_directories(db4/db-4.8.30.NC/examples_c/getting_started)
include_directories(db4/db-4.8.30.NC/examples_cxx/excxx_repquote)
include_directories(db4/db-4.8.30.NC/examples_cxx/excxx_repquote_gsg)
include_directories(db4/db-4.8.30.NC/examples_cxx/getting_started)
include_directories(db4/db-4.8.30.NC/examples_cxx/wce_tpcb)
include_directories(db4/db-4.8.30.NC/examples_stl/repquote)
include_directories(db4/db-4.8.30.NC/mod_db4)
include_directories(db4/db-4.8.30.NC/perl/BerkeleyDB)
include_directories(db4/db-4.8.30.NC/perl/DB_File)
include_directories(db4/db-4.8.30.NC/php_db4)
include_directories(db4/db-4.8.30.NC/stl)
include_directories(db4/db-4.8.30.NC/test_micro/source)
include_directories(db4/db-4.8.30.NC/test_stl/base)
include_directories(db4/include)
include_directories(src)
include_directories(src/bench)
include_directories(src/bench/data)
include_directories(src/compat)
include_directories(src/config)
include_directories(src/consensus)
include_directories(src/crypto)
include_directories(src/crypto/ctaes)
include_directories(src/index)
include_directories(src/interfaces)
include_directories(src/leveldb/db)
include_directories(src/leveldb/helpers/memenv)
include_directories(src/leveldb/include)
include_directories(src/leveldb/include/leveldb)
include_directories(src/leveldb/port)
include_directories(src/leveldb/port/win)
include_directories(src/leveldb/table)
include_directories(src/leveldb/util)
include_directories(src/node)
include_directories(src/obj)
include_directories(src/policy)
include_directories(src/primitives)
include_directories(src/qt)
include_directories(src/qt/forms)
include_directories(src/qt/test)
include_directories(src/rpc)
include_directories(src/script)
include_directories(src/secp256k1/contrib)
include_directories(src/secp256k1/include)
include_directories(src/secp256k1/src)
include_directories(src/secp256k1/src/java)
include_directories(src/secp256k1/src/modules/ecdh)
include_directories(src/secp256k1/src/modules/recovery)
include_directories(src/support)
include_directories(src/support/allocators)
include_directories(src/test)
include_directories(src/test/data)
include_directories(src/test/fuzz)
include_directories(src/test/gen)
include_directories(src/univalue)
include_directories(src/univalue/include)
include_directories(src/univalue/lib)
include_directories(src/util)
include_directories(src/wallet)
include_directories(src/wallet/test)
include_directories(src/zmq)

# Add path for custom modules
set(CMAKE_MODULE_PATH
        ${CMAKE_MODULE_PATH}
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules
        )

# Make constrib script accessible
set(CONTRIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/contrib)

# If ccache is available,then use it
find_program(CCACHE ccache)
if(CCACHE)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE})
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE})
endif(CCACHE)

# Defualt to RelWithFebInfo configuration
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
            "Select the configuration for the build" FORCE)
endif()


add_custom_target(build-bitcoin ALL
        COMMAND ./autogen.sh
        COMMAND ./configure
        COMMAND $(MAKE) WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMAND $(MAKE) install)

add_custom_target(check-all)
add_custom_target(check)
add_subdirectory(src)
#add_subdirectory(test)

add_custom_target(debug-bitcoind ALL)
add_custom_target(debug-bitcoin-qt ALL)
